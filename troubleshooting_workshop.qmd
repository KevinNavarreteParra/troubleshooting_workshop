---
title: "On Troubleshooting"
author: "Kevin Navarrete-Parra"
date: "2024-11-15"
toc: true
toc-title: "Index"
toc-depth: 1
code-line-numbers: false
code-copy: hover
smaller: true
format: 
  revealjs:
    incremental: false
    theme: moon
institute: "University of Nevada, Las Vegas"
---



# Introduction

## What is this Guide?

::: {.fragment .fade-in-then-semi-out}
While this guide primarily focuses on R, these principles are program-agnostic.
:::

::: {.fragment .fade-in-then-semi-out}
This guide is intended to help you troubleshoot your code, whether you use R, STATA, Python, or any other statistical software.
:::


# What is Code?

## A Few Basics

::: {.fragment .fade-in-then-semi-out}
Code is a set of instructions that tells a computer what to do in a structured and repeatable way.
:::

::: {.fragment .fade-in-then-semi-out}
In this regard, code serves a similar function to language in that it communicates information using a predefined set of rules.
:::

::: {.fragment .fade-in-then-semi-out}
When put together in a script (.R, .do, .py, etc), your program will ordinally execute your instructions precisely as you've specified them and in the most literal sense possible.
:::

## Code as Language

::: {.fragment .fade-in-then-semi-out}
Like the English language, code has nouns, verbs, and adjectives/adverbs, all of which come together to form a coherent message given the correct syntax.
:::

::: {.fragment .fade-in-then-semi-out}
With that in mind...
:::

::: {.fragment .fade-in}
-  **Nouns** are the objects you create.
-  **Verbs** are the functions you use to act on those noun objects.
-  **Adjectives** and **adverbs** are the arguments or modifiers that change the verb's behavior.
:::

# What is Code Actually Doing?

## You always start with your noun

Let's work through an example so you can see what I mean: 

```{r, echo=TRUE, results='asis'}
x <- c(1, 2, 3, 4, 5, NA)
```

::: {.fragment .fade-in-then-semi-out}
I start by creating a vector `x` with the numbers 1 through 5 and an `NA` value.
:::

::: {.fragment .fade-in-then-semi-out}
This is my noun. It can be whatever I want it to represent, and I can name it whatever I want. 
:::

## A Noun is Nothing Without Some Action

```{r, echo=TRUE, results='asis'}
mean(x)
y <- mean(x)
```

::: {.fragment .fade-in-then-semi-out}
Then I use the verb `mean` to calculate vector `x`'s average.
:::

::: {.fragment .fade-in-then-semi-out}
If I assign the result to a new noun, `y`, then I have a new noun upon which I can act.
:::

## Sometimes Nouns and Verbs Aren't Enough!

```{r, echo=TRUE, results='asis'}
mean(x, na.rm = TRUE)
```

::: {.fragment .fade-in-then-semi-out}
What happens when you have a verb that you want to behave in a certain way? 
:::

::: {.fragment .fade-in-then-semi-out}
As we saw earlier, simply calculating the vector's mean gave us a null result because the original vector contained a missing value `NA`.
:::

::: {.fragment .fade-in-then-semi-out}
I can use an adverb/adjective `na.rm = TRUE` to remove the missing value `NA` from the calculation, resulting in a different outcome.
:::

## In English, Please

```{r, echo=TRUE, results='asis'}
x <- c(1, 2, 3, 4, 5, NA)
mean(x, na.rm = TRUE)
```

::: {.fragment .fade-in-then-semi-out}
All together, this code is saying: "Create a vector `x` with the numbers 1 through 5 and an `NA` value. Calculate the mean of `x`, but ignore any `NA` value in `x`."
:::

# On Troubleshooting

## How Does this Relate to Troubleshooting Code?

::: {.fragment .fade-in-then-semi-out}
The first step to troubleshooting any coding issue is always twofold: understand what you *want* your code to do and understand what your code is *actually* doing.
:::

::: {.fragment .fade-in-then-semi-out}
If I know I have a vector `x` whose mean I want to calculate, and I also have an idea of what the resulting outcome should look like, then I can compare my expectation to reality to identify any discrepancies.
:::

::: {.fragment .fade-in-then-semi-out}
If I know that calculating a mean should result in a single number, but I get an `NA` value, something clearly went wrong despite my code running without any errors.
:::

## What is an Error, Then? 

::: {.fragment .fade-in-then-semi-out}
An error occurs whenever you have a discrepancy between what you want your code to do and what your code is actually doing.
:::

::: {.fragment .fade-in-then-semi-out}
Note that my definition above includes both *explicit* errors--when your code fails to run and the program spits out a warning--and *implicit* errors--when your code runs without a warning but produces an unexpected result.
:::

## An Example of an Explicit Error

```{r, echo=TRUE, results='asis', error=TRUE}
mean(undefined_object, na.rm = TRUE)
```

::: {.fragment .fade-in-then-semi-out}
In this example, I'm trying to calculate the mean of an object that doesn't exist, resulting in that scary error message.
:::

## How Can I Fix Errors?

::: {.fragment .fade-in-then-semi-out}
Be curious! Ask yourself: "What do I want my code to do?" and "What is my code actually doing?"
:::

::: {.fragment .fade-in-then-semi-out}
Most error handling is a process of elimination tantamount to hypothesis testing.
:::

::: {.fragment .fade-in-then-semi-out}
Begin with a conjecture--"I think the error is here"--and then test that hypothesis by changing your code to see if the error persists.
:::

## That's Great, Kevin, But I Need More Practical Advice!

::: {.fragment .fade-in-then-semi-out}
That's fair, but regardless of how you practically approach troubleshooting, the underlying principles remain the same.
:::

::: {.fragment .fade-in-then-semi-out}
When you get an explicit error, copy the error message to your browser or ChatGPT. The former will often bring up old forum posts on StackOverflow or GitHub that can help you troubleshoot. The latter will make practical suggestions based on the error message and the code you provided.
:::

::: {.fragment .fade-in-then-semi-out}
When you get an implicit error, start by breaking down your code into its constituent parts and then testing each part individually to see where the error occurs.
:::

## The Main Takeaway

::: {.fragment .fade-in-then-semi-out}
Ask questions!
:::

::: {.fragment .fade-in-then-semi-out}
Be curious!
:::

::: {.fragment .fade-in-then-semi-out}
Understand what you want your code to do and what your code is actually doing.
:::

::: {.fragment .fade-in-then-semi-out}
Look things up!
:::

::: {.fragment .fade-in-then-semi-out}
Read the error messages and function documentation!
:::

::: {.fragment .fade-in-then-semi-out}
And, most importantly, don't be afraid to ask for help!
:::

# Resources

## Some Useful Resources I Won't Cover

- [R for Data Science](https://r4ds.hadley.nz/)
- [Advanced R: Chapter 22 on Debugging](https://adv-r.hadley.nz/debugging.html)
- [RStudio Cheatsheets](https://rstudio.github.io/cheatsheets/)
- [StackOverflow](https://stackoverflow.com/)
- [Top 10 Errors in R and How to Fix Them](https://statsandr.com/blog/top-10-errors-in-r/)
- [Handling Errors & Warnings in R | List of Typical Messages & How to Solve](https://statisticsglobe.com/errors-warnings-r)
- [ChatGPT](https://chatgpt.com/)
- [15 Common Errors in Python and How to Fix Them](https://betterstack.com/community/guides/scaling-python/python-errors/)
- [Common Errors in Python and How to Fix Them](https://www.freecodecamp.org/news/common-errors-in-python-and-how-to-fix-them/)
- [Error Messages in STATA](https://www.stata.com/manuals/u8.pdf)

## Some Useful R Packages, If That's Your Thing

```{r, eval=FALSE, results='asis', echo=TRUE}
install.packages(c("errorist", "reprex"))
```

- `errorist`: A package that will connect R to your browser and automatically look up an error or warning message for you when you run into trouble.
- `reprex`: A package that will help you create a reproducible example of your code, which is incredibly useful when asking for help on forums like StackOverflow.


# Thank you!

![[xkcd.com](https://xkcd.com/)](https://imgs.xkcd.com/comics/wisdom_of_the_ancients.png)

